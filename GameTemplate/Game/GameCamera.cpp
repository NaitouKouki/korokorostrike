#include "stdafx.h"
#include "GameCamera.h"
#include "Game.h"

GameCamera::GameCamera()
{

}

GameCamera::~GameCamera()
{

}

bool GameCamera::Start()
{
	//注視点から視点までのベクトルを設定。
	m_toCameraPos.Set(0.0f, 100.0f, 300.0f);

	//プレイヤーのインスタンスを探す。
	//m_player = FindGO<Player>("player");
	m_game = FindGO<Game>("game");

	return true;
}

void GameCamera::Update()
{
	if (m_isCameraEvent) {
		if (!m_isInit) {
			//ばねカメラの初期化。
			m_springCamera.Init(
				*g_camera3D,		//ばねカメラの処理を行うカメラを指定する。
				1000.0f,			//カメラの移動速度の最大値。
				true,				//カメラと地形とのあたり判定を取るかどうかのフラグ。trueだとあたり判定を行う。
				5.0f				//カメラに設定される球体コリジョンの半径。第３引数がtrueの時に有効になる。
			);
			m_isInit = true;
		}
		//カメラを更新。
		//注視点を計算する。
		// 現時点では使わないので一度コメントアウトする
		/*Vector3 target = m_player->rbPos;
		//プレイヤの足元からちょっと上を注視点とする。
		target.y += 80.0f;
		target += g_camera3D->GetForward() * 20.0f;*/

		Vector3 toCameraPosOld = m_toCameraPos;
		//パッドの入力を使ってカメラを回す。
		float x = g_pad[0]->GetRStickXF();
		float y = g_pad[0]->GetRStickYF();
		//Y軸周りの回転
		Quaternion qRot;
		qRot.SetRotationDeg(Vector3::AxisY, 1.5f * x);
		qRot.Apply(m_toCameraPos);
		//X軸周りの回転。
		Vector3 axisX;
		axisX.Cross(Vector3::AxisY, m_toCameraPos);
		axisX.Normalize();
		qRot.SetRotationDeg(axisX, 1.5f * y);
		qRot.Apply(m_toCameraPos);
		//カメラの回転の上限をチェックする。
		//注視点から視点までのベクトルを正規化する。
		//正規化すると、ベクトルの大きさが１になる。
		//大きさが１になるということは、ベクトルから強さがなくなり、方向のみの情報となるということ。
		Vector3 toPosDir = m_toCameraPos;
		toPosDir.Normalize();
		if (toPosDir.y < -0.5f) {
			//カメラが上向きすぎ。
			m_toCameraPos = toCameraPosOld;
		}
		else if (toPosDir.y > 0.8f) {
			//カメラが下向きすぎ。
			m_toCameraPos = toCameraPosOld;
		}

		//視点を計算する。
		//Vector3 pos = target + m_toCameraPos;

		//バネカメラに注視点と視点を設定する。
		//m_springCamera.SetPosition(pos);
		//m_springCamera.SetTarget(target);

		//カメラの更新。
		m_springCamera.Update();
	}
	else {
		CameraEvent();
	}
}

void GameCamera::CameraEvent()
{
	/*m_toCameraTargetPos.Lerp(t, m_game->m_flagPos, m_player->m_position);
	t += 0.005;
	g_camera3D->SetTarget(m_toCameraTargetPos);
	Vector3 playerPos = m_player->m_position;
	playerPos.y += 600.0f;

	Vector3 flagDirection = m_player->m_position - m_game->m_flagPos;
	flagDirection.Normalize();
	flagDirection *= 500.0f;
	playerPos += flagDirection;

	g_camera3D->SetPosition(playerPos);

	if (t > 1.0f) {
		m_isCameraEvent = true;
	}*/
}
